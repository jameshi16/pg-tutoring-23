* Tutor Session Week 3

* Before we start
- Attendance Taking

* Exercise: Intuition behind sorting

Imagine you have a messy bookshelf. You want to start sorting the
books in alphabetical order.

How would you do it?

* Bubble Sort

#+BEGIN_SRC python
  def bubble_sort(arr: list[T]) -> list[T]:
      swapped = True
      while swapped:
          swapped = False
          for i in range(1, len(arr)):
              if arr[i] < arr[i - 1]:
                  arr[i - 1], arr[i] = arr[i], arr[i - 1]
                  swapped = True
      return arr
#+END_SRC

* Insertion Sort

#+BEGIN_SRC python
  def insertion_sort(arr: list[T]) -> list[T]:
      for i in range(len(arr)):
          for j in range(i, 0, -1):
              if arr[j] < arr[j - 1]:
                  arr[j], arr[j - 1] = arr[j - 1], arr[j]

      return arr
#+END_SRC

* Selection Sort

#+BEGIN_SRC python
def selection_sort(arr: list[T]) -> list[T]:
    for i in range(len(arr)):
        min_ind, min_num = min(enumerate(arr[i:]), key=lambda x: x[1])
        arr[i], arr[min_ind + i] = arr[min_ind + i], arr[i]
    return arr
#+END_SRC

* Merge Sort

#+BEGIN_SRC python
  def merge_sort(arr: list[T]) -> list[T]:
      if len(arr) == 1:
          return arr
      elif len(arr) == 2:
          if arr[0] > arr[1]:
              arr[0], arr[1] = arr[1], arr[0]
          return arr

      a = merge_sort(arr[:len(arr) // 2])
      b = merge_sort(arr[len(arr) // 2:])
      i, j = 0, 0
      while i < len(a) and j < len(b):
          if a[i] <= b[j]:
              arr[i + j] = a[i]
              i += 1
          elif a[i] > b[j]:
              arr[i + j] = b[j]
              j += 1

      while i < len(a):
          arr[i + j] = a[i]
          i += 1

      while j < len(b):
          arr[i + j] = b[j]
          j += 1

      return arr
#+END_SRC


* Quick Sort - Actually Sorting

#+BEGIN_SRC python
  def quick_sort(arr: list[T]) -> list[T]:
      if len(arr) == 0 or len(arr) == 1:
          return arr
      elif len(arr) == 2:
          if arr[0] > arr[1]:
              arr[0], arr[1] = arr[1], arr[0]
          return arr

      k = quick_partition(arr)

      a = quick_sort(arr[:k])
      b = quick_sort(arr[k + 1:])

      return a + [arr[k]] + b
#+END_SRC


* Quick Sort - Partitioning

#+BEGIN_SRC python
  def quick_partition(arr: list[T]) -> T:
      i = 1
      j = len(arr) - 1

      while i < j:
          while i < len(arr) - 1 and arr[i] <= arr[0]:
              i += 1

          while j > 0 and arr[j] >= arr[0]:
              j -= 1

          if i >= j:
              break
          arr[i], arr[j] = arr[j], arr[i]

      arr[0], arr[j] = arr[j], arr[0]
      return j
#+END_SRC
